package Entity;

import java.sql.SQLException;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 26 21:25:10 BDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxOmFinanceEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getId();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        BuyerId {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getBuyerId();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setBuyerId((Number)value);
            }
        }
        ,
        ItemType {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getItemType();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setItemType((String)value);
            }
        }
        ,
        Price {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getPrice();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setPrice((Number)value);
            }
        }
        ,
        Fromdate {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getFromdate();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setFromdate((Date)value);
            }
        }
        ,
        Todate {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getTodate();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setTodate((Date)value);
            }
        }
        ,
        CreationDate {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getCreationDate();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setCreationDate((Date)value);
            }
        }
        ,
        CreationBy {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getCreationBy();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setCreationBy((Number)value);
            }
        }
        ,
        UpdateDate {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getUpdateDate();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setUpdateDate((Date)value);
            }
        }
        ,
        UpdateBy {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getUpdateBy();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setUpdateBy((Number)value);
            }
        }
        ,
        BuyerName {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getBuyerName();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setBuyerName((String)value);
            }
        }
        ,
        Remarks {
            public Object get(XxOmFinanceEOImpl obj) {
                return obj.getRemarks();
            }

            public void put(XxOmFinanceEOImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(XxOmFinanceEOImpl object);

        public abstract void put(XxOmFinanceEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int BUYERID = AttributesEnum.BuyerId.index();
    public static final int ITEMTYPE = AttributesEnum.ItemType.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int FROMDATE = AttributesEnum.Fromdate.index();
    public static final int TODATE = AttributesEnum.Todate.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CREATIONBY = AttributesEnum.CreationBy.index();
    public static final int UPDATEDATE = AttributesEnum.UpdateDate.index();
    public static final int UPDATEBY = AttributesEnum.UpdateBy.index();
    public static final int BUYERNAME = AttributesEnum.BuyerName.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxOmFinanceEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("Entity.XxOmFinanceEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for BuyerId, using the alias name BuyerId.
     * @return the BuyerId
     */
    public Number getBuyerId() {
        return (Number)getAttributeInternal(BUYERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuyerId.
     * @param value value to set the BuyerId
     */
    public void setBuyerId(Number value) {
        setAttributeInternal(BUYERID, value);
    }

    /**
     * Gets the attribute value for ItemType, using the alias name ItemType.
     * @return the ItemType
     */
    public String getItemType() {
        return (String)getAttributeInternal(ITEMTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemType.
     * @param value value to set the ItemType
     */
    public void setItemType(String value) {
        setAttributeInternal(ITEMTYPE, value);
    }

    /**
     * Gets the attribute value for Price, using the alias name Price.
     * @return the Price
     */
    public Number getPrice() {
        return (Number)getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Price.
     * @param value value to set the Price
     */
    public void setPrice(Number value) {
        setAttributeInternal(PRICE, value);
    }

    /**
     * Gets the attribute value for Fromdate, using the alias name Fromdate.
     * @return the Fromdate
     */
    public Date getFromdate() {
        return (Date)getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Fromdate.
     * @param value value to set the Fromdate
     */
    public void setFromdate(Date value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for Todate, using the alias name Todate.
     * @return the Todate
     */
    public Date getTodate() {
        return (Date)getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Todate.
     * @param value value to set the Todate
     */
    public void setTodate(Date value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for CreationBy, using the alias name CreationBy.
     * @return the CreationBy
     */
    public Number getCreationBy() {
        return (Number)getAttributeInternal(CREATIONBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationBy.
     * @param value value to set the CreationBy
     */
    public void setCreationBy(Number value) {
        setAttributeInternal(CREATIONBY, value);
    }

    /**
     * Gets the attribute value for UpdateDate, using the alias name UpdateDate.
     * @return the UpdateDate
     */
    public Date getUpdateDate() {
        return (Date)getAttributeInternal(UPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdateDate.
     * @param value value to set the UpdateDate
     */
    public void setUpdateDate(Date value) {
        setAttributeInternal(UPDATEDATE, value);
    }

    /**
     * Gets the attribute value for UpdateBy, using the alias name UpdateBy.
     * @return the UpdateBy
     */
    public Number getUpdateBy() {
        return (Number)getAttributeInternal(UPDATEBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdateBy.
     * @param value value to set the UpdateBy
     */
    public void setUpdateBy(Number value) {
        setAttributeInternal(UPDATEBY, value);
    }

    /**
     * Gets the attribute value for BuyerName, using the alias name BuyerName.
     * @return the BuyerName
     */
    public String getBuyerName() {
        return (String)getAttributeInternal(BUYERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuyerName.
     * @param value value to set the BuyerName
     */
    public void setBuyerName(String value) {
        setAttributeInternal(BUYERNAME, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        return (String)getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        try {
                    super.create(attributeList);
                    oracle.jbo.server.SequenceImpl s =
                        new oracle.jbo.server.SequenceImpl("XX_OM_FINANCE_S",
                                                           getDBTransaction());
                    oracle.jbo.domain.Number sVal = s.getSequenceNumber();
                    setId(sVal);
                    System.out.println("Recently Created Recipe Id: " + sVal);
                    //setCreationDate((Date)Date.getCurrentDate());
                } catch (Exception e) {
                    e.printStackTrace();
                }
        
        
        
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
          * Custom DML update/insert/delete logic here.
          * @param operation the operation type
          * @param e the transaction event
          */
          protected void doDML(int operation, TransactionEvent e) {             
               Map sessionScope = ADFContext.getCurrent().getSessionScope();   
               String user = (String)sessionScope.get("userId");
        //            String user = "6489";
              // String respId = (String)sessionScope.get("respId");
        //            String respId = "5555";
                if (DML_INSERT == operation){
                    try {
                        System.out.println("@In INSERT DODML");
                        System.out.println("operation number: " + operation);
                        setCreationDate((Date)Date.getCurrentDate());
                        setCreationBy(new oracle.jbo.domain.Number(user));
                        //setRespId(new oracle.jbo.domain.Number(respId));
                    } catch (SQLException f) {
                        System.out.println(f.getMessage());
                    }
                }
                if(DML_UPDATE == operation){
                   try {
                       System.out.println("@In UPDATE DODML");
                       System.out.println("operation number: " + operation);
                       setUpdateDate((Date)Date.getCurrentDate());
                       setUpdateBy (new oracle.jbo.domain.Number(user)); 
                   } catch (SQLException f) {
                      System.out.println(f.getMessage());
                   }
                }
                super.doDML(operation, e);
         }
}
